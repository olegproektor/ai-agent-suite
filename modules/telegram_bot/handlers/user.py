# handlers/user.py

from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from telegram_bot.sheets.sheets import (
    get_profile_by_user_id,
    insert_user_by_code,
    check_code_valid
)
from ai.generator import generate_task
from keyboards.inline import task_buttons
import logging

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥ –∫–æ–¥–∞
user_pending_verification = {}

logging.basicConfig(level=logging.INFO)

# -----------------------------------
# /start ‚Üí –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞
# -----------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logging.info(f"[START] user_id: {user_id}")

    profile = get_profile_by_user_id(user_id)
    if profile:
        await update.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /task.")
        return

    await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞:")
    user_pending_verification[user_id] = True

# -----------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ access-–∫–æ–¥–∞
# -----------------------------------
async def handle_code_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    code = update.message.text.strip()

    if user_id not in user_pending_verification:
        return  # –ù–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è

    if check_code_valid(code):
        insert_user_by_code(user_id, code)
        await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /task.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É.")

    user_pending_verification.pop(user_id, None)

# -----------------------------------
# /task ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è
# -----------------------------------
async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logging.info(f"[TASK] /task –æ—Ç user_id: {user_id}")

    profile = get_profile_by_user_id(user_id)
    if not profile:
        await update.message.reply_text("üîê –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É.")
        return

    task_text = generate_task(profile)
    await update.message.reply_text(
        text=f"üìå –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{task_text}",
        reply_markup=task_buttons()
    )

# -----------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
# -----------------------------------
async def handle_task_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "done":
        await query.edit_message_text("üëç –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
    elif query.data == "skip":
        await query.edit_message_text("‚è≠ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    elif query.data == "retry":
        profile = get_profile_by_user_id(user_id)
        if not profile:
            await context.bot.send_message(
                chat_id=query.message.chat.id,
                text="üîê –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É."
            )
            return

        task_text = generate_task(profile)
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text=f"üîÅ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{task_text}",
            reply_markup=task_buttons()
        )
