from telegram import Update
from telegram.ext import ContextTypes
from ai.generator import generate_task
from keyboards.inline import task_buttons

# –ö–æ–º–∞–Ω–¥–∞ /task ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    profile = {
        "role": "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
        "goal": "–ü–æ–≤—ã—Å–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å",
        "style": "—Ç—ë–ø–ª—ã–π"
    }

    task_text = generate_task(profile)

    await update.message.reply_text(
        text=f"–í–æ—Ç —Ç–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ:\n\n{task_text}",
        reply_markup=task_buttons()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def handle_task_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "done":
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ üí™")

    elif query.data == "skip":
        await query.edit_message_text("–û–∫, –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏. –ó–∞–≤—Ç—Ä–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑.")

    elif query.data == "retry":
        await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ... üîÑ")

        profile = {
            "role": "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
            "goal": "–ü–æ–≤—ã—Å–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å",
            "style": "—Ç—ë–ø–ª—ã–π"
        }

        task_text = generate_task(profile)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–í–æ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:\n\n{task_text}",
            reply_markup=task_buttons()
        )

